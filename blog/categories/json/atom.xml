<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: json | Flavio Castelli]]></title>
  <link href="http://flavio.castelli.name/blog/categories/json/atom.xml" rel="self"/>
  <link href="http://flavio.castelli.name/"/>
  <updated>2015-04-24T18:04:40+02:00</updated>
  <id>http://flavio.castelli.name/</id>
  <author>
    <name><![CDATA[Flavio Castelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QJson: a Qt-based library for mapping JSON data to QVariant objects]]></title>
    <link href="http://flavio.castelli.name/2008/11/04/qjson_qt_json_library/"/>
    <updated>2008-11-04T13:37:07+01:00</updated>
    <id>http://flavio.castelli.name/2008/11/04/qjson_qt_json_library</id>
    <content type="html"><![CDATA[<p>In order to realize a project of mine I started looking for a Qt library for
mapping JSON data to Qt objects.</p>

<p>I came over a couple of solutions but none of them made me happy. So in the
last weekend I wrote my own library : <strong>QJson</strong> The library is based on Qt
toolkit and converts JSON data to <em>QVariant</em> instances. JSON arrays will be
mapped to <em>QVariantList</em> instances, while JSON&rsquo;s objects will be mapped to
<em>QVariantMap</em>. The JSON parser is generated with Bison, while the scanner has
been coded by me.</p>

<h3>Usage</h3>

<p>Converting JSON&rsquo;s data to <em>QVariant</em> instance is really simple:</p>

<p><figure class='code'><figcaption><span>[] [ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="c1">// create a JSonDriver instance</span>
</span><span class='line'><span class="n">JSonDriver</span> <span class="n">driver</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="c1">// json is a QString containing the data to convert</span>
</span><span class='line'><span class="n">QVariant</span> <span class="n">result</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">parse</span> <span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ok</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Suppose you&rsquo;re going to convert this JSON data:</p>

<p><figure class='code'><figcaption><span>[JSON data] [ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span> <span class="err">&amp;ldquo;encoding&amp;rdquo;</span> <span class="err">:</span> <span class="err">&amp;ldquo;UTF-8&amp;rdquo;,</span> <span class="err">&amp;ldquo;plug-ins&amp;rdquo;</span> <span class="err">:</span> <span class="err">[</span> <span class="err">&amp;ldquo;python&amp;rdquo;,</span> <span class="err">&amp;ldquo;c++&amp;rdquo;,</span> <span class="err">&amp;ldquo;ruby&amp;rdquo;</span> <span class="err">],</span>
</span><span class='line'>  <span class="err">&amp;ldquo;indent&amp;rdquo;</span> <span class="err">:</span> <span class="err">{</span> <span class="err">&amp;ldquo;length&amp;rdquo;</span> <span class="err">:</span> <span class="err">3,</span> <span class="err">&amp;ldquo;use_space&amp;rdquo;</span> <span class="err">:</span> <span class="err">true</span> <span class="p">}</span> <span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The following code would convert the JSON data and parse it:</p>

<p><figure class='code'><figcaption><span>[] [ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">JSonDriver</span> <span class="n">driver</span><span class="p">;</span>
</span><span class='line'><span class="kt">bool</span> <span class="n">ok</span><span class="p">;</span>
</span><span class='line'><span class="n">QVariantMap</span> <span class="n">result</span> <span class="o">=</span> <span class="n">driver</span><span class="p">.</span><span class="n">parse</span> <span class="p">(</span><span class="n">json</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">amp</span><span class="p">;</span><span class="n">ok</span><span class="p">).</span><span class="n">toMap</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ok</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">qFatal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">An</span> <span class="n">error</span> <span class="n">occured</span> <span class="n">during</span> <span class="n">parsing</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span>
</span><span class='line'>  <span class="n">exit</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">qDebug</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">encoding</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">result</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">encoding</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;].</span><span class="n">toString</span><span class="p">();</span>
</span><span class='line'><span class="n">qDebug</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">plugins</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;;</span>
</span><span class='line'><span class="n">foreach</span> <span class="p">(</span><span class="n">QVariant</span> <span class="n">plugin</span><span class="p">,</span> <span class="n">result</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">plug</span><span class="o">-</span><span class="n">ins</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;].</span><span class="n">toList</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">qDebug</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">\</span><span class="n">t</span><span class="o">-&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">plugin</span><span class="p">.</span><span class="n">toString</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">QVariantMap</span> <span class="n">nestedMap</span> <span class="o">=</span> <span class="n">result</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">indent</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;].</span><span class="n">toMap</span><span class="p">();</span>
</span><span class='line'><span class="n">qDebug</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">length</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nestedMap</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">length</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;].</span><span class="n">toInt</span><span class="p">();</span>
</span><span class='line'><span class="n">qDebug</span><span class="p">()</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="nl">use_space</span><span class="p">:</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">nestedMap</span><span class="p">[</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">use_space</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;].</span><span class="n">toBool</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The output would be:</p>

<pre><code>encoding: "UTF-8" plugins: - "python" - "c++" - "ruby" length: 3 use_space: true
</code></pre>

<h3>Requirements</h3>

<p>QJson requires:</p>

<ul>
<li>cmake</li>
<li>Qt</li>
</ul>


<h3>Obtain the source</h3>

<p>Actually QJson code is hosted on KDE subversion repository. You can download
it using a svn client:</p>

<blockquote><p>svn co svn://anonsvn.kde.org/home/kde/trunk/playground/libs/qjson</p></blockquote>

<p>For more informations visit <a href="http://qjson.sourceforge.net">QJson site</a></p>
]]></content>
  </entry>
  
</feed>
