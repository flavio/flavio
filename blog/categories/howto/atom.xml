<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: howto | Flavio Castelli]]></title>
  <link href="http://flavio.castelli.name/blog/categories/howto/atom.xml" rel="self"/>
  <link href="http://flavio.castelli.name/"/>
  <updated>2014-02-13T11:00:54+01:00</updated>
  <id>http://flavio.castelli.name/</id>
  <author>
    <name><![CDATA[Flavio Castelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to run a single rails unit test]]></title>
    <link href="http://flavio.castelli.name/2010/05/28/rails_execute_single_test/"/>
    <updated>2010-05-28T15:57:57+02:00</updated>
    <id>http://flavio.castelli.name/2010/05/28/rails_execute_single_test</id>
    <content type="html"><![CDATA[<p>This post explains how to execute a single unit test (or even a single test
method) instead of running the complete unit test suite.</p>

<p>In order to run the unit tests of your rails application, basically you have
these official possibilities:</p>

<ul>
<li><code>rake test</code>: runs all unit, functional and integration tests.</li>
<li><code>rake test:units</code>: runs all the unit tests.</li>
<li><code>rake test:functionals</code>: runs all the functional tests.</li>
<li><code>rake test:integration</code>: runs all the integration tests.
Each one of these commands requires some time and they are not the best
solution while developing a new feature or fixing a bug. In this circumstance
we just want to have a quick feedback from the unit test of the code we are
editing.</li>
</ul>


<p>Waiting for all the unit/functional tests to complete decreases our
productivity, what we need is to execute just a single unit test. Fortunately
there are different solutions for this problem, let's go through them.</p>

<h2>The easy approach: use your favorite IDE</h2>

<p>Most of the IDE supporting ruby allow you to run a single unit test. If you
are using Netbeans running a single unit test is really easy:</p>

<ul>
<li>make sure the editor if showing the file you want to test or the file containing its unit tests</li>
<li>Hit <em>Ctrl+Shift+F6</em> or click on the following menu entry: <em>Debug->Debug Test File</em>
Two new windows will be opened: one will contain the output produced by your
unit test, the other one will show the results of the unit test.</li>
</ul>


<p>As you will notice the summary window contains also some useful information
like the:</p>

<ul>
<li>hyper links to the exact location of the code that produced the error/failure.</li>
<li>execution time required by each one of the test methods.
As you will experience it will be like "compiling" your ruby code.</li>
</ul>


<h2>From the console</h2>

<p>If you are not using Netbeans you can always rely on some command line tools.</p>

<h3>No additional tools</h3>

<p>These "tricks" don't require additional gems, hence they will work out of the
box.</p>

<p>The first solution is to call this rake task:</p>

<pre><code>rake test TEST=path_to_test_file
</code></pre>

<p>So the final command should look like</p>

<pre><code>rake test TEST=test/unit/invitation_test.rb
</code></pre>

<p>Unfortunately on my machine this command repeats the same test three times, I
hope you won't have the same weird behavior also on your systems...</p>

<p>Alternatively you can use the following command:</p>

<pre><code>ruby -I"lib:test" path_to_test_file"
</code></pre>

<p>It's even possible to <strong>call a specific test method of your testcase</strong>:</p>

<pre><code>ruby -I"lib:test" path_to_test_file -n name_of_the_method"
</code></pre>

<p>So calling:</p>

<pre><code>ruby -I"lib:test" test/unit/invitation_test.rb - test_should_create_invitation
</code></pre>

<p>will execute <strong>only</strong> <em>InvitationTest::test_should_create_invitation</em>.</p>

<p>It's also possible to <strong>execute only the test methods matching a regular
expression</strong>. Look at this example:</p>

<pre><code>ruby -I"lib:test" test/unit/invitation_test.rb -n /.*between.*/
</code></pre>

<p>This command will execute only the test methods matching the <em>/.<em>between.</em>/</em>
regexp.</p>

<h3>Using the single_test gem</h3>

<p>If you want to avoid the awful syntax showed in the previous paragraph there's
a gem that can help you, it's called
<a href="http://github.com/grosser/single_test">single_test</a>.</p>

<p>The github page contains a nice documentation, but let's go through the most
common use cases.</p>

<p>You can install the gem as a rails plugin:</p>

<pre><code>script/plugin install git://github.com/grosser/single_test.git
</code></pre>

<p>single_test will add new rake tasks to your rails project, but <strong>won't</strong>
override the original ones.</p>

<p>Suppose we want to execute the unit test of <em>user.rb</em>, just type the following
command:</p>

<pre><code>rake test:user
</code></pre>

<p>If you want to execute the functional test of <em>User</em> just call:</p>

<pre><code>rake test:user_c
</code></pre>

<p>Appending <em>"</em>c"_ to the class name will automatically execute its functional
test (if it exists).</p>

<p>It's still possible to <strong>execute a specif test method</strong>:</p>

<pre><code>rake test:user_c:_test_name_
</code></pre>

<p>So calling:</p>

<pre><code>rake test:user_c:test_update_user
</code></pre>

<p>Will execute the <em>test_update_user</em> method written inside of
<em>test/functional/user_controller_test.rb</em>.</p>

<p>It's still possible to use regexp:</p>

<pre><code>rake test:invitation:.*between.*
</code></pre>

<p>This syntax is equivalent to <code>ruby -I"lib:test" test/unit/invitation_test.rb
-n /.*between.*/</code>.</p>

<h2>Possible issues</h2>

<p>When a single unit test is run all the usual database initialization tasks are
not performed. If your code is relying on newly created migrations you will
surely have lots of errors. This is happening because the new migrations have
not been applied to the test database.</p>

<p>In order to fix these errors just execute:</p>

<pre><code>rake db:test:prepare
</code></pre>

<p>before running your unit test.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated git-svn howto]]></title>
    <link href="http://flavio.castelli.name/2007/11/23/updated-git-svn-howto/"/>
    <updated>2007-11-23T15:49:12+01:00</updated>
    <id>http://flavio.castelli.name/2007/11/23/updated-git-svn-howto</id>
    <content type="html"><![CDATA[<p>Maybe someone has already experimented this situation:</p>

<blockquote><p>You're hacking on your local working copy and you want to keep it up-to-date
but, since you have some uncommitted changes, <em>git-svn rebase</em> cannot be
executed</p></blockquote>

<p>I was just thinking to write something about<em> </em>this problem when I read a
<a href="http://www.digikam.org/?q=node/270">post</a> on digikam blog.</p>

<p>In this post Marcel proposes a workaround using a bash function. In fact
there's a <em>"cleaner"</em> solution, if you're interested read the last part of my
<a href="http://www.flavio.castelli.name/howto_use_git_with_svn">git-svn howto</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Howto use Git and svn together]]></title>
    <link href="http://flavio.castelli.name/2007/09/04/howto_use_git_with_svn/"/>
    <updated>2007-09-04T12:22:15+02:00</updated>
    <id>http://flavio.castelli.name/2007/09/04/howto_use_git_with_svn</id>
    <content type="html"><![CDATA[<p>In these days I've heard lot of rumors around <a href="http://git.or.cz/">Git</a>. After
reading some manual/tutorial/guide I discovered that it can be really useful,
especially if you spend lot of time coding off-line (that's my situation).</p>

<p>This is a really small howto that describes how to work on a project versioned
with svn (maybe taken from KDE repository ;) ) using git.</p>

<h3>What're the advantages?</h3>

<p>Since Git is a distributed revision control system (while svn is a centralized
one) you can perform commits, brances, merges,... on your local working dir
without being connected to internet.</p>

<p>Next time you'll be online, you will be able to <em>"push"</em> your changes back to
the central svn server.</p>

<h3>Steps to follow:</h3>

<p>You've to:</p>

<ol>
<li>install <em>git</em> and <em>git-svn</em></li>
<li>create the working dir: <code>mkdir strigi</code></li>
<li>init your git working dir: <code>cd strigi &amp;&amp; git-svn init https://svn.kde.org/home/kde/trunk/kdesupport/strigi</code> <em>git-svn init</em> command is followed by the address of the svn repository (in this case we point to strigi's repository)</li>
<li>Find a commit regarding the project (you can get it from <a href="http://cia.vc/">cia version control</a>). <strong>Warning:</strong> the command <em>git-log</em> will show project's history starting from this revision.</li>
<li>Perform the command <code>git-svn fetch -rREVISION</code> Where <em>REVISION</em> is the number obtained before.</li>
<li>Update your working dir: <code>git-svn rebase</code>
Now you'll be able to work on your project using git as revision control
system.</li>
</ol>


<p>To <strong>keep update</strong> your working copy just perform:</p>

<p><code>git-svn rebase</code></p>

<p>You can <strong>commit your changes </strong> to the svn server using the command:</p>

<p><code>git-svn dcommit</code></p>

<p>In this way each commit made with git will be <em>"transformed"</em> into a svn one.</p>

<h3>Solve git-svn rebase problems</h3>

<p>While adding new cool features to your program, you may experiment some
problem when synchronizing with the main development tree. In fact you have to
commit all local modifications (using the <code>git-commit</code> command) before
invoking <code>git-svn rebase</code>.</p>

<p>Sometimes it isn't reasonable since your changes are not yet ready to be
committed (you haven't finished/tested/improved your work). But don't worry,
git has a native solution also for this problem, just follow these steps:</p>

<ol>
<li>put aside your changes using the command: <code>git-stash</code></li>
<li>update your working copy using: <code>git-svn rebase</code> as usual</li>
<li>take back your changes typing: <code>git-stash apply</code></li>
<li>clear <em>"the stash"</em> typing: <code>git-stash clear</code>
After the first step all your uncommitted changes will disappear from the
working copy, so you'll be able to perform the rebase command without
problems.</li>
</ol>


<p>For further informations read <code>git-stash</code> man page.</p>

<p>That's all.</p>

<p>A special mention goes to Thiago Macieira for his help.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xesam and bathroom hacking]]></title>
    <link href="http://flavio.castelli.name/2007/08/10/xesam-and-bathroom-hacking/"/>
    <updated>2007-08-10T15:00:21+02:00</updated>
    <id>http://flavio.castelli.name/2007/08/10/xesam-and-bathroom-hacking</id>
    <content type="html"><![CDATA[<p>Yesterday morning I was quite arrived at work when Laura (my gf) called me.
Something went wrong in our bathroom and water was everywhere. She closed the
main water tap and I took the first train for home (yes, since I'm an outlier
I take the train two times per day). Once arrived at home I performed some
hacking on the guilty washing machine, checked some pipes and than took the
next train for office.</p>

<p>In the end yesterday I spent approximately <strong>four hours</strong> on the train. During
this elapse of time I started the Xesam User Language parser :)  During the
travels I:</p>

<ul>
<li>refreshed my memories about <a href="http://www.gnu.org/software/flex/">Flex</a>, <a href="http://www.gnu.org/software/bison/">Bison</a> and language parsers in general</li>
<li>wrote XesamUserLanguage's <a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form">BNF grammar</a></li>
<li>wrote Flex scanner</li>
<li>started Bison parser</li>
</ul>


<p>Now, after fixing some build errors, I'll start writing Bison's grammar rules.
These rules will translate Xesam user language queries into Strigi::Query
objects.</p>

<p>I hope it will work (both bathroom and Xesam parser ;) )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to have some fun with Strigi and Xesam queries]]></title>
    <link href="http://flavio.castelli.name/2007/08/09/query_strigi_using_xesam/"/>
    <updated>2007-08-09T13:10:30+02:00</updated>
    <id>http://flavio.castelli.name/2007/08/09/query_strigi_using_xesam</id>
    <content type="html"><![CDATA[<p>Last day just after I hit the <em>"submit"</em> button a doubt came into my mind:
"did I say everything ?" Well, the answer is <strong>"No!"</strong> In fact I forgot to
tell you one of the most important things: <em>how to have some fun with Strigi
and Xesam!</em> Actually the only way to perform <em>XesamQueryLanguage</em> queries with
Strigi is through the <em>strigicmd</em> program.</p>

<p><em>Strigicmd</em> is a command-line tool shipped with Strigi. It can perform
different actions like:</p>

<ul>
<li>create Strigi indexes</li>
<li>remove items from index</li>
<li>list all files contained into an index</li>
<li>retrieve informations associated to an indexed file</li>
<li>update the contents of your index</li>
<li>query the index</li>
<li><strong>perform a query using XesamQueryLanguage</strong></li>
</ul>


<p>So, if you want to try the new Xesam support you've just to use <em>strigicmd</em>
with the <em>xesamquery</em> option. The command syntax is: <code>strigicmd xesamquery -t
backend -d indexdir [-u xesam_user_language_file] [-q
xesam_query_language_file]</code> As you can expect you've to save your Xesam query
to file and point <em>strigicmd</em> to it.</p>

<p>This is a really small step-by-step guide:</p>

<ul>
<li>Create a new Strigi index (in this case I'll index all irc logs): <code>strigicmd create -t clucene -d temp/ logs/</code></li>
<li><p>Create a simple file containing your Xesam query. You can find some example query on <a href="http://www.freedesktop.org/wiki/XesamQueryLanguage">Xesam site</a> or inside strigi tarball (complete path: <em>strigi/src/streamanalyzer/xesam/testqueries/</em>). This is a stupid and easy query:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>[query] [] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;request&gt;</span>
</span><span class='line'><span class="nt">&lt;query&gt;</span>
</span><span class='line'><span class="nt">&lt;or&gt;</span>
</span><span class='line'><span class="nt">&lt;equals&gt;</span>
</span><span class='line'><span class="nt">&lt;string</span> <span class="na">casesensitive=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>Oever<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/equals&gt;</span>
</span><span class='line'><span class="nt">&lt;contains&gt;</span>
</span><span class='line'><span class="nt">&lt;string</span> <span class="na">casesensitive=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>jos<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/contains&gt;</span>
</span><span class='line'><span class="nt">&lt;/or&gt;</span>
</span><span class='line'><span class="nt">&lt;/query&gt;</span>
</span><span class='line'><span class="nt">&lt;/request&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>Perform the search, just type:</p>

<p>strigicmd xesamquery -t clucene -d temp/ -q ~/irc_oever.xml</p></li>
<li><p><strong>Enjoy the search results ;)</strong></p></li>
</ul>


<p>Remember that <em>XesamUserLanguage</em> query language isn't yet supported.</p>
]]></content>
  </entry>
  
</feed>
