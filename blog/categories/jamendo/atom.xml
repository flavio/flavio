<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jamendo | Flavio Castelli]]></title>
  <link href="http://flavio.castelli.name/blog/categories/jamendo/atom.xml" rel="self"/>
  <link href="http://flavio.castelli.name/"/>
  <updated>2013-11-28T18:31:30+01:00</updated>
  <id>http://flavio.castelli.name/</id>
  <author>
    <name><![CDATA[Flavio Castelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby downloader for Jamendo]]></title>
    <link href="http://flavio.castelli.name/2008/10/03/ruby-downloader-for-jamendo/"/>
    <updated>2008-10-03T11:28:28+02:00</updated>
    <id>http://flavio.castelli.name/2008/10/03/ruby-downloader-for-jamendo</id>
    <content type="html"><![CDATA[<p>Also this year I'll attend the Linux day (a day dedicated to Gnu/LinuxÂ  and
FLOSS that occurs every year in Italy) organized by my <a href="http://bglug.it">LUG</a>.
Guess what I'll be talking about... ;)</p>

<p>While organizing the event somebody proposed to setup a local server with some
music released under CC license. He suggested to download some albums from
<a href="http://www.jamendo.com">Jamendo</a> (due to network issues we won't be able to
provide direct access to the website).</p>

<p>Since nobody wanted to download the albums by hand, last night I wrote a small
ruby program that does the dirty job.</p>

<h3>Requirements:</h3>

<p>Ruby and json gem have to be installed on you machine.</p>

<h3>Usage:</h3>

<p>Help:<a href="http://www.flavio.castelli.name/wp-%0Acontent/uploads/2008/10/jamendo_downloader.rb"></a></p>

<p>   ./jamendo_downloader.rb --help</p>

<p>Download the top 10 rock albums:</p>

<p>  ./jamendo_downloader.rb -g rock -t 10</p>

<h3>Have fun</h3>

<p>I think there's nothing more to say... enjoy it!</p>

<p><div><script src='https://gist.github.com/2437530.js?file=jamendo_downloader.rb'></script>
<noscript><pre><code>#!/usr/bin/ruby

require &#39;rubygems&#39;
require &#39;open-uri&#39;
require &#39;json&#39;
require &#39;ftools&#39;
require &#39;cgi&#39;
require &#39;optparse&#39;

@download_dir = nil
@genre = nil
@top_num = nil
# move cursor to beginning of line
cr = &quot;\r&quot;
cwd = Dir.getwd
# ANSI escape code to clear line from cursor to end of line
# &quot;\e&quot; is an alternative to &quot;\033&quot;
# cf. http://en.wikipedia.org/wiki/ANSI_escape_code
clear = &quot;\e[0K&quot;

# reset lines
@reset = cr + clear

# if possible restore downloaded album_id array
begin
    @downloaded = JSON.parse(File.new(&#39;downloaded.json&#39;).read.gsub(/\t|\r/,&#39;&#39;))
rescue
    @downloaded = []
end

# Add colorizing functionalities to String #####################################

class String
    def red; colorize(self, &quot;\e[1m\e[31m&quot;); end
    def green; colorize(self, &quot;\e[1m\e[32m&quot;); end
    def dark_green; colorize(self, &quot;\e[32m&quot;); end
    def yellow; colorize(self, &quot;\e[1m\e[33m&quot;); end
    def dark_yellow; colorize(self, &quot;\e[33m&quot;); end
    def blue; colorize(self, &quot;\e[1m\e[34m&quot;); end
    def dark_blue; colorize(self, &quot;\e[34m&quot;); end
    def pur; colorize(self, &quot;\e[1m\e[35m&quot;); end
    def colorize(text, color_code)  &quot;#{color_code}#{text}\e[0m&quot; end
end

################################################################################

# Functions ####################################################################

def download(genre,album,tracks_url)
    artist_name = album[&#39;artist_name&#39;]
    album_name  = album[&#39;name&#39;]
    album_id    = album[&#39;id&#39;]

    local_download_path = File.expand_path &quot;#{@download_dir}/#{genre}/#{artist_name}/#{album_name}&quot;
    File.makedirs local_download_path
    Dir.chdir local_download_path

    print &quot;\n\n&quot;
    puts &quot;Going to download of \&quot;#{album_name}\&quot; by \&quot;#{artist_name}\&quot; finished&quot;.dark_blue
    counter = 1
    tracks_url.each do |url|
      print &quot;#{@reset}downloading #{counter}/#{tracks_url.size}&quot;
      $stdout.flush

      open(CGI.unescape(url.split(/\?/).first.split(/\//).last),&quot;wb&quot;).write(open(url).read)
      counter +=1
    end

    @downloaded &lt;&lt; album_id
    
    puts &quot;\nDownload finished&quot;.green
end

################################################################################

# parse command line options ###################################################

opt = OptionParser.new
opt.banner = &quot;Usage: run_tests [options]&quot;

opt.on( &quot;-h&quot;, &quot;--help&quot;, &quot;Print this message&quot; ) do
  puts opt
  exit
end

opt.on( &quot;-g&quot;, &quot;--genre&quot;, &quot;=GENRE_NAME&quot;, &quot;download music of the specified genre&quot; ) do |val|
  @genre = val
end

opt.on( &quot;-d&quot;, &quot;--download_dir&quot;, &quot;=DONWLOAD_DIR&quot;, &quot;place where the music files will be downloaded&quot; ) do |val|
  @download_dir = val
end

opt.on( &quot;-t&quot;, &quot;=TOP_NUM&quot;, &quot;download only TOP_NUM album of the specified genre &quot; ) do |val|
  @top_num = val
end

begin
  opt.parse!( ARGV )
rescue OptionParser::InvalidOption
  puts $!
  puts opt
  exit
end

if ARGV.size &gt; 0
  puts &quot;Too many arguments&quot;
  puts opt
  exit
end

if @genre.nil?
  puts &#39;You have to specify the genre&#39;
  puts opt
  exit 1
end

if @top_num.nil?
  puts &#39;You have to specify the top num param&#39;
  puts opt
  exit 1
end

if @download_dir.nil?
  @download_dir = &quot;#{Dir.pwd}/downloaded_files&quot;
  puts &#39;You have not specified the download dir&#39;
  puts &quot;Files will be download inside #{@download_dir}&quot;
end

################################################################################

query_url = &quot;http://api.jamendo.com/get2/id+name+artist_name/album/jsonpretty/?tag_idstr=#{@genre}&amp;n=#{@top_num}&amp;order=rating_desc&quot;
query_url += &quot;&amp;idexclude=#{@downloaded.join(&#39;+&#39;)}&quot; unless @downloaded.empty?

JSON.parse(open(query_url).read.gsub(/\t|\r/,&#39;&#39;)).each do |album|
  album_download_urls = &quot;http://www.jamendo.com/get/track/id/album/audio/plain/#{album[&#39;id&#39;]}/&quot;
  
  tracks_url = []
  open(album_download_urls).each do |track_url|
    tracks_url &lt;&lt; track_url.chomp
  end

  download(@genre, album, tracks_url)
end

Dir.chdir cwd
open(&#39;downloaded.json&#39;,&#39;w&#39;) { |f| f &lt;&lt; @downloaded.to_json }
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
