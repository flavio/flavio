<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xesam | Flavio Castelli]]></title>
  <link href="http://flavio.castelli.name/blog/categories/xesam/atom.xml" rel="self"/>
  <link href="http://flavio.castelli.name/"/>
  <updated>2014-11-03T16:12:23+01:00</updated>
  <id>http://flavio.castelli.name/</id>
  <author>
    <name><![CDATA[Flavio Castelli]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My current tasks]]></title>
    <link href="http://flavio.castelli.name/2008/01/18/my_current_tasks/"/>
    <updated>2008-01-18T15:31:23+01:00</updated>
    <id>http://flavio.castelli.name/2008/01/18/my_current_tasks</id>
    <content type="html"><![CDATA[<p>Usually I write blog posts announcing <strong>what I have done</strong>, but this time
<a href="http://pollycoke.net/2008/01/14/strigi-ha-un-piano-di-sviluppo-%0Afinalmente/">it</a> <a href="http://www.kdedevelopers.org/node/3204">is</a>
<a href="http://strigi.sourceforge.net/?q=strigi_metting_summary">useless</a>. So I&rsquo;m
going to blog about <strong>what I&rsquo;m going to do</strong>.  After latest Strigi irc
meeting, I came out with this task:</p>

<blockquote><p>KDE integration: Flavio will coordinate the definition of interfaces over
which KDE will handle searching and metadata. He can ask Aaron, Evgeny and Jos
for help with the interface design. The interface will cover:</p>

<ul>
<li><p>Querying via Xesam</p></li>
<li><p>Configuration of the Strigi daemon</p></li>
<li><p>Indexing and deindexing of data by passing it to the daemon (allowing
for indexing for more than just files)</p></li>
<li><p>Controlling the daemon (starting, stopping, pausing)</p></li>
</ul>
</blockquote>

<p>Once this interface will be ready, it will be easy to integrate Strigi
functionalities inside KDE programs. This mean (just reporting the most
relevant cases) that it will be possible to create a Strigi krunner, have
metadata extraction inside Dolphin and Konqueror, interact with Akonadi&hellip;</p>

<p>Talking about Xesam, right in these days I got a mail from <a href="http://developer.berlios.de/blog/authors/6825-Fabrice-Colin">Fabrice Colin</a>, author of
<a href="http://pinot.berlios.de/">Pinot</a>. Recently Fabrice made some improvements on
Pinot&rsquo;s <em>XesamQueryLanguage</em> parser (which is also <a href="http://www.flavio.castelli.name/strigi_xesam_query_language_support">used by Strigi</a>).
We&rsquo;re now figuring out how to share our code in a more convenient way. Maybe
we&rsquo;ll use <a href="http://svnbook.red-bean.com/nightly/en/svn.advanced.externals.html">svn external</a>&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strigi gains full Xesam queries support]]></title>
    <link href="http://flavio.castelli.name/2007/08/31/strigi_full_xesam_support/"/>
    <updated>2007-08-31T17:30:52+02:00</updated>
    <id>http://flavio.castelli.name/2007/08/31/strigi_full_xesam_support</id>
    <content type="html"><![CDATA[<p>As I said in
<a href="http://www.flavio.castelli.name/strigi_xesam_query_language_support">this</a>
previous post, Strigi&rsquo;s Xesam support was half-done since <a href="http://wiki.freedesktop.org/wiki/XesamUserSearchLanguage">XesamUserSearchLanguage</a> wasn’t yet
handled. Well, this is no longer true&hellip; ;) In these weeks I’ve been working
on <em>XesamUserSearchLanguage</em> support. Ehm&hellip; to be honest, I’ve been
<em><strong>fighting</strong></em> with <a href="http://www.gnu.org/software/bison/">Bison</a>.</p>

<p>But in the end I tamed the beast and now
<a href="http://wiki.freedesktop.org/wiki/XesamAbout">Xesam</a> support in Strigi is
full.</p>

<p>IMHO <em>XesamUserSearchLanguage</em> can be considered more important than
<a href="http://wiki.freedesktop.org/wiki/XesamQueryLanguage">XesamQueryLanguage</a>
since common users will write queries in this way.</p>

<p>As reported on the project page:
<blockquote><p>It is <em>[XesamUserSearchLanguage]</em> designed as an extended synthesis of<br/>Apple&rsquo;s spotlight and Google&rsquo;s search languages.</p></blockquote></p>

<p>These are some possible queries (examples taken from freedesktop site):</p>

<ul>
<li><code>_type:music hendrix_</code> will return all music items related to hendrix</li>
<li><code>_type:image size&gt;=1mb tag:flower africa_</code> will return all pictures displaying a flower greater than 1 Mb and related with africa</li>
</ul>


<h3>Technical aspects</h3>

<p>The Xesam&rsquo;s UserSearchLanguage query &ndash;> Strigi::Query object conversion is
made using a hand-written scanner and a C++ parser created by Bison.</p>

<p>You don&rsquo;t have to worry if you don&rsquo;t have Bison installed on your system since
all parser generated code is already put into svn. In these days, as soon as
I&rsquo;ll have some spare time (when?!), I&rsquo;ll write another post about open-source
scanner and parser generators.</p>

<p>By now I would like to thank <a href="http://apaku.wordpress.com">Andreas Pakulat</a>
(developer of <a href="http://www.kdevelop.org/">KDevelop</a>) for his help with parser
generators.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xesam and bathroom hacking]]></title>
    <link href="http://flavio.castelli.name/2007/08/10/xesam-and-bathroom-hacking/"/>
    <updated>2007-08-10T15:00:21+02:00</updated>
    <id>http://flavio.castelli.name/2007/08/10/xesam-and-bathroom-hacking</id>
    <content type="html"><![CDATA[<p>Yesterday morning I was quite arrived at work when Laura (my gf) called me.
Something went wrong in our bathroom and water was everywhere. She closed the
main water tap and I took the first train for home (yes, since I&rsquo;m an outlier
I take the train two times per day). Once arrived at home I performed some
hacking on the guilty washing machine, checked some pipes and than took the
next train for office.</p>

<p>In the end yesterday I spent approximately <strong>four hours</strong> on the train. During
this elapse of time I started the Xesam User Language parser :)  During the
travels I:</p>

<ul>
<li>refreshed my memories about <a href="http://www.gnu.org/software/flex/">Flex</a>, <a href="http://www.gnu.org/software/bison/">Bison</a> and language parsers in general</li>
<li>wrote XesamUserLanguage&rsquo;s <a href="http://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form">BNF grammar</a></li>
<li>wrote Flex scanner</li>
<li>started Bison parser</li>
</ul>


<p>Now, after fixing some build errors, I&rsquo;ll start writing Bison&rsquo;s grammar rules.
These rules will translate Xesam user language queries into Strigi::Query
objects.</p>

<p>I hope it will work (both bathroom and Xesam parser ;) )</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to have some fun with Strigi and Xesam queries]]></title>
    <link href="http://flavio.castelli.name/2007/08/09/query_strigi_using_xesam/"/>
    <updated>2007-08-09T13:10:30+02:00</updated>
    <id>http://flavio.castelli.name/2007/08/09/query_strigi_using_xesam</id>
    <content type="html"><![CDATA[<p>Last day just after I hit the <em>&ldquo;submit&rdquo;</em> button a doubt came into my mind:
&ldquo;did I say everything ?&rdquo; Well, the answer is <strong>&ldquo;No!&rdquo;</strong> In fact I forgot to
tell you one of the most important things: <em>how to have some fun with Strigi
and Xesam!</em> Actually the only way to perform <em>XesamQueryLanguage</em> queries with
Strigi is through the <em>strigicmd</em> program.</p>

<p><em>Strigicmd</em> is a command-line tool shipped with Strigi. It can perform
different actions like:</p>

<ul>
<li>create Strigi indexes</li>
<li>remove items from index</li>
<li>list all files contained into an index</li>
<li>retrieve informations associated to an indexed file</li>
<li>update the contents of your index</li>
<li>query the index</li>
<li><strong>perform a query using XesamQueryLanguage</strong></li>
</ul>


<p>So, if you want to try the new Xesam support you&rsquo;ve just to use <em>strigicmd</em>
with the <em>xesamquery</em> option. The command syntax is: <code>strigicmd xesamquery -t
backend -d indexdir [-u xesam_user_language_file] [-q
xesam_query_language_file]</code> As you can expect you&rsquo;ve to save your Xesam query
to file and point <em>strigicmd</em> to it.</p>

<p>This is a really small step-by-step guide:</p>

<ul>
<li>Create a new Strigi index (in this case I&rsquo;ll index all irc logs): <code>strigicmd create -t clucene -d temp/ logs/</code></li>
<li><p>Create a simple file containing your Xesam query. You can find some example query on <a href="http://www.freedesktop.org/wiki/XesamQueryLanguage">Xesam site</a> or inside strigi tarball (complete path: <em>strigi/src/streamanalyzer/xesam/testqueries/</em>). This is a stupid and easy query:</p>

<p><figure class='code'><figcaption><span>[query] [ ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;request&gt;</span>
</span><span class='line'><span class="nt">&lt;query&gt;</span>
</span><span class='line'><span class="nt">&lt;or&gt;</span>
</span><span class='line'><span class="nt">&lt;equals&gt;</span>
</span><span class='line'><span class="nt">&lt;string</span> <span class="na">casesensitive=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>Oever<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/equals&gt;</span>
</span><span class='line'><span class="nt">&lt;contains&gt;</span>
</span><span class='line'><span class="nt">&lt;string</span> <span class="na">casesensitive=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>jos<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/contains&gt;</span>
</span><span class='line'><span class="nt">&lt;/or&gt;</span>
</span><span class='line'><span class="nt">&lt;/query&gt;</span>
</span><span class='line'><span class="nt">&lt;/request&gt;</span>
</span></code></pre></td></tr></table></div></figure></p></li>
<li><p>Perform the search, just type:</p>

<p>strigicmd xesamquery -t clucene -d temp/ -q ~/irc_oever.xml</p></li>
<li><p><strong>Enjoy the search results ;)</strong></p></li>
</ul>


<p>Remember that <em>XesamUserLanguage</em> query language isn&rsquo;t yet supported.</p>
]]></content>
  </entry>
  
</feed>
