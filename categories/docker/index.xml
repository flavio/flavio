<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Flavio Castelli</title>
    <link>http://flavio.castelli.me/categories/docker/</link>
    <description>Recent content in Docker on Flavio Castelli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 27 Feb 2020 21:48:16 +0200</lastBuildDate>
    
	<atom:link href="http://flavio.castelli.me/categories/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Semantic versioning and containers</title>
      <link>http://flavio.castelli.me/2020/02/27/semantic-versioning-and-containers/</link>
      <pubDate>Thu, 27 Feb 2020 21:48:16 +0200</pubDate>
      
      <guid>http://flavio.castelli.me/2020/02/27/semantic-versioning-and-containers/</guid>
      <description>Developers are used to express the dependencies of their programs using semantic versioning constraints.
For example a Node.js application relying on left-pad could force only certain versions of this library to be used by specifying a constraint like &amp;gt;= 1.1.0 &amp;lt; 1.2.0. This would force npm to install the latest version of the library that satisfies the constraint.
How does that translates to containers?
Imagine the following scenario: a developer deploys a containerized application that requires a Redi database.</description>
    </item>
    
    <item>
      <title>Hackweek Project Docker Registry Mirror</title>
      <link>http://flavio.castelli.me/2018/07/18/hackweek-project-docker-registry-mirror/</link>
      <pubDate>Wed, 18 Jul 2018 15:48:16 +0200</pubDate>
      
      <guid>http://flavio.castelli.me/2018/07/18/hackweek-project-docker-registry-mirror/</guid>
      <description>As part of SUSE Hackweek 17 I decided to work on a fully fledged docker registry mirror.
You might wonder why this is needed, after all it&amp;rsquo;s already possible to run a docker distribution (aka registry) instance as a pull-through cache. While that&amp;rsquo;s true, this solution doesn&amp;rsquo;t address the needs of more &amp;ldquo;sophisticated&amp;rdquo; users.
The problem Based on the feedback we got from a lot of SUSE customers it&amp;rsquo;s clear that a simple registry configured to act as a pull-through cache isn&amp;rsquo;t enough.</description>
    </item>
    
    <item>
      <title>Putting openSUSE Docker images on a diet</title>
      <link>http://flavio.castelli.me/2015/07/24/putting-opensuse-docker-images-on-a-diet/</link>
      <pubDate>Fri, 24 Jul 2015 14:21:34 +0200</pubDate>
      
      <guid>http://flavio.castelli.me/2015/07/24/putting-opensuse-docker-images-on-a-diet/</guid>
      <description>In case you missed the openSUSE images for Docker got suddenly smaller.
During the last week I worked together with Marcus Schäfer (the author of KIWI) to reduce their size.
We fixed some obvious mistakes (like avoiding to install man pages and documentation), but we also removed some useless packages.
These are the results of our work:
 openSUSE 13.2 image: from 254M down to 82M openSUSE Tumbleweed image: from 267M down to 87M  Just to make some comparisons, the Ubuntu image is around 188M while the Fedora one is about 186M.</description>
    </item>
    
    <item>
      <title>Introducing Portus: an authorization service and front-end for Docker registry</title>
      <link>http://flavio.castelli.me/2015/04/23/introducing-portus-an-authorization-service-and-front-end-for-docker-registry/</link>
      <pubDate>Thu, 23 Apr 2015 21:43:09 +0200</pubDate>
      
      <guid>http://flavio.castelli.me/2015/04/23/introducing-portus-an-authorization-service-and-front-end-for-docker-registry/</guid>
      <description>One of the perks of working at SUSE is hackweek, an entire week you can dedicate working on whatever project you want. Last week the 12th edition of hackweek took place. So I decided to spend it working on solving one of the problems many users have when running an on-premise instance of a Docker registry.
The Docker registry works like a charm, but it&amp;rsquo;s hard to have full control over the images you push to it.</description>
    </item>
    
    <item>
      <title>Orchestrating Docker containers on openSUSE</title>
      <link>http://flavio.castelli.me/2014/11/03/orchestrating-docker-containers-on-opensuse/</link>
      <pubDate>Mon, 03 Nov 2014 14:51:42 +0100</pubDate>
      
      <guid>http://flavio.castelli.me/2014/11/03/orchestrating-docker-containers-on-opensuse/</guid>
      <description>A couple of weeks ago the 11th edition of SUSE&amp;rsquo;s hackweek took place. This year I decided to spend this time to look into the different orchestration and service discovery tools build around Docker.
In the beginning I looked into the kubernetes project. I found it really promising but AFAIK not yet ready to be used. It&amp;rsquo;s still in its early days and it&amp;rsquo;s in constant evolution. I will surely keep looking into it.</description>
    </item>
    
    <item>
      <title>Building docker images with KIWI</title>
      <link>http://flavio.castelli.me/2014/05/06/building-docker-images-with-kiwi/</link>
      <pubDate>Tue, 06 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://flavio.castelli.me/2014/05/06/building-docker-images-with-kiwi/</guid>
      <description>I&amp;rsquo;m pleased to announce Marcus Schäfer has just made possible to build docker images with KIWI.
For those who never heard about it, KIWI is a tool which creates Linux systems for both physical and virtual machines. It can create openSUSE, SUSE and other types of Linux distributions.
Update: I changed the required version of kiwi and the openSUSE 13.1 template. Kiwi just received some improvements which do no longer force the image to include the lxc package.</description>
    </item>
    
  </channel>
</rss>